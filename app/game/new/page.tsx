'use client';
import { useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { createClient } from "@supabase/supabase-js";
import { MinesweeperGame } from '../lib/minesweeper-game';
import supabaseClient from '../lib/supabase-client';


export default function CreateGamePage() {
    const router = useRouter();
    const [gameId, setGameId] = useState<string | null>(null);

    useEffect(() => {
        const createNewGameAndNavigateToIt = async () => {
            const gameId = await createNewGame(8, 8, 10);

            // Set the gameId in the component state
            setGameId(gameId);

            // Navigate to the newly created game
            router.push(`/game/${gameId}`);
        };

        createNewGameAndNavigateToIt();
    }, [router]);

    if (!gameId) {
        // Loading state or handle error
        return <div>Loading...</div>;
    }

    // You might display a loading state while creating the game
    return <div>Creating game...</div>;
};

// Function to create a new game
async function createNewGame(nRows: number, nCols: number, nMines: number) {

    const minePlacements = MinesweeperGame.CreateMinePlacements(nRows, nCols, nMines);
    const { data: gameData, error: gameError } = await supabaseClient
        .from('games')
        .insert([{
            n_rows: nRows,
            n_cols: nCols,
            n_mines: nMines,
            mine_placements: minePlacements
        }])
        .select();

    if (gameError) {
        throw new Error(`Failed to create game: {gameError}`);
    }

    // Get the unique game ID generated by Supabase
    // TODO: Use React query for types
    const gameId = (gameData?.[0] as unknown as { game_id: string })?.game_id;

    if (!gameId) {
        throw new Error('Failed to get game ID');
    }

    // Return the generated game ID
    return gameId;
}
